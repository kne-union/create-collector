{"version":3,"file":"static/js/830.b385c402.chunk.js","mappings":"iLAAA,MAAMA,EAAkBA,CAACC,EAAUC,KACjCA,EAAUC,OAAOC,OAAO,CAAC,EAAG,CAAEC,QAAS,KAAYH,GAInD,IACEI,EADEC,EAAW,GAEf,MAAMC,EAAmBC,UACvB,IACEF,EAASG,OAAS,SAAYT,EAASM,GACvCA,EAAW,E,CACX,MAAOI,GACPC,QAAQC,MAAMF,EAChB,GAEIG,EAAML,UACVF,EAASQ,KAAKC,GACdV,EAAe,IAAIW,MACfC,OAAOC,UAAUjB,EAAQkB,YAAclB,EAAQkB,UAAY,GAAKb,EAASG,QAAUR,EAAQkB,WAI3FH,KAAKI,MAAQf,GAAgBJ,EAAQkB,UAAUf,gBAH3CG,KAWV,OAFAM,EAAIQ,IAAMd,EAEHM,E","sources":["../../src/index.js"],"sourcesContent":["const createCollector = (callback, options) => {\n  options = Object.assign({}, { maxTime: 5 * 1000 }, options);\n  // 有maxLength和maxTime两种模式，默认为maxTime模式，\n  // 即：maxTime时间间隔内所有消息一次性触发回调，如果maxTime内没有消息则不触发\n  // maxLength模式则在消息数量达到maxLength时触发回调\n  let messages = [],\n    executorTime;\n  const executorCallback = async () => {\n    try {\n      messages.length > 0 && (await callback(messages));\n      messages = [];\n    } catch (e) {\n      console.error(e);\n    }\n  };\n  const api = async data => {\n    messages.push(data);\n    executorTime = new Date();\n    if (Number.isInteger(options.maxLength) && options.maxLength > 0 && messages.length >= options.maxLength) {\n      await executorCallback();\n      return;\n    }\n    if (Date.now() - executorTime >= options.maxLength.maxTime) {\n      await executorCallback();\n      return;\n    }\n  };\n\n  api.all = executorCallback;\n\n  return api;\n};\n\nexport default createCollector;\n"],"names":["createCollector","callback","options","Object","assign","maxTime","executorTime","messages","executorCallback","async","length","e","console","error","api","push","data","Date","Number","isInteger","maxLength","now","all"],"sourceRoot":""}