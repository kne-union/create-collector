{"version":3,"file":"static/js/830.666d78f1.chunk.js","mappings":"iLAAA,MAAMA,EAAkBA,CAACC,EAAUC,KACjCA,EAAUC,OAAOC,OAAO,CAAC,EAAG,CAAEC,QAAS,KAAYH,GAInD,MAAMI,EAAkBC,OAAOC,UAAUN,EAAQO,YAAcP,EAAQO,UAAY,EACnF,IAAIC,EAAW,GACf,MAAMC,EAAmBC,UACvB,IACEF,EAASG,OAAS,SAAYZ,EAASS,GACvCA,EAAW,E,CACX,MAAOI,GACPC,QAAQC,MAAMF,EAChB,GAGIG,GACHX,GACDY,YAAY,KACVP,KACCT,EAAQG,SAEPc,EAAMP,UACVF,EAASU,KAAKC,GACVf,GAAmBI,EAASG,QAAUX,EAAQO,iBAC1CE,KAWV,OAPAQ,EAAIG,IAAMX,EAEVQ,EAAII,MAAQX,UACVK,GAASO,cAAcP,SACjBN,KAGDQ,E","sources":["../../src/index.js"],"sourcesContent":["const createCollector = (callback, options) => {\n  options = Object.assign({}, { maxTime: 5 * 1000 }, options);\n  // 有maxLength和maxTime两种模式，默认为maxTime模式，\n  // 即：maxTime时间间隔内所有消息一次性触发回调，如果maxTime内没有消息则不触发\n  // maxLength模式则在消息数量达到maxLength时触发回调\n  const isMaxLengthMode = Number.isInteger(options.maxLength) && options.maxLength > 0;\n  let messages = [];\n  const executorCallback = async () => {\n    try {\n      messages.length > 0 && (await callback(messages));\n      messages = [];\n    } catch (e) {\n      console.error(e);\n    }\n  };\n\n  const timer =\n    !isMaxLengthMode &&\n    setInterval(() => {\n      executorCallback();\n    }, options.maxTime);\n\n  const api = async data => {\n    messages.push(data);\n    if (isMaxLengthMode && messages.length >= options.maxLength) {\n      await executorCallback();\n    }\n  };\n\n  api.all = executorCallback;\n\n  api.close = async () => {\n    timer && clearInterval(timer);\n    await executorCallback();\n  };\n\n  return api;\n};\n\nexport default createCollector;\n"],"names":["createCollector","callback","options","Object","assign","maxTime","isMaxLengthMode","Number","isInteger","maxLength","messages","executorCallback","async","length","e","console","error","timer","setInterval","api","push","data","all","close","clearInterval"],"sourceRoot":""}